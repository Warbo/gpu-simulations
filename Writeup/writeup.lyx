#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Physics Simulations on Graphics Cards
\end_layout

\begin_layout Abstract
Abstract
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Typical Physics Simulations
\end_layout

\begin_layout Standard
Physics, indeed the whole of science, is the attempt to describe the world
 with Mathematics.
 Computers have become an invaluable tool in this endeavour not only through
 the secondary side-effects of the programs they run, which give us quick
 results to calculations, instant communication between collaborators around
 the world, mass storage and retrieval of knowledge on a scale much grander
 than the brain and act as the only capable observers of our experiments
 beyond the microscopic and macroscopic; at a much more fundamental level,
 the principle of operation of a computing device is isomorphic to the proof
 of a theorem
\begin_inset Note Note
status open

\begin_layout Plain Layout
Curry-Howard isomorphism
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Since the defining characteristic of Mathematics is the discovery and proof
 of theorems, computers, by their very existence, provide the Physicist
 with all of the proving power needed to tackle many interesting problems.
 The role of the Scientist and Mathematician is now solely as the discovery,
 and only because computers care only that a proof is syntactically correct
 difficult for computers since they see no difference between 
\begin_inset Quotes eld
\end_inset

interesting
\begin_inset Quotes erd
\end_inset

 theorems and every other tautology.
\end_layout

\begin_layout Subsection
GPU Overview
\end_layout

\begin_layout Standard
A typical commodity computer (ie.
 not intended for embedded or server use) will contain a graphics card,
 either as a plug-in circuit board or integrated into the main motherboard.
 The reason for this is historical, since graphical applications like games
 can always make full use of a computer's resources no matter how extensive
 they are, eg.
 by increasing the resolution or frame-rate of the display, and are thus
 always demanding more powerful hardware.
 To keep down the cost of satiating this demand, it was sensible to offload
 graphics tasks to a co-processor which could be upgraded without having
 to buy a whole new computer.
 These co-processors are called GPUs (Graphics Processing Units) and they
 are housed along with their life-support components on the graphics card.
\end_layout

\begin_layout Standard
Real-time 3D rendering was certainly the main driving force for graphics
 card development, for example most modern GPUs no longer contain explicit
 circuitry for 2D rendering, instead using the space to expand the 3D engine
 and emulating any 2D processing calls.
 The most striking difference between 3D graphics and other common computing
 tasks is that it is an 
\emph on
embarassingly parallel
\emph default
 problem.
 In other words, it is trivial to get a near 100% increase in performance
 simply by doubling the number of computers that are working on the task
 at once.
\end_layout

\begin_layout Standard
In general such speedups are hard to achieve, since allowing many machines
 to access mutable variables at once requires 
\emph on
locks
\emph default
 to prevent conflicting changes, which themselves bring notoriously difficult
 to spot problems like 
\emph on
deadlock
\emph default
 (where two machines require two locks before accessing memory, one machine
 holds one lock, the other machine holds the other lock and neither is capable
 of proceeding).
 A trivial method, such as an optimisation pass in a compiler, for effectively
 utilising resources in parallel is a much sought-after goal in many research
 groups.
 The fact that 3D graphics scales so easily makes the difficulties of parallel
 programming seem embarassing in comparison.
\end_layout

\begin_layout Standard
The reason 3D is so inherently parallel is that there is very little dependence
 between the calculations being performed.
 This means, for example, that the screen can be split into sections, each
 sent to a different processor for rendering, then the results collected
 and displayed together.
 Any additional resources can be utilised by splitting the screen into more
 sections.
 This put GPU manufacturers in a much better position than their rival CPU
 manufacturers: instead of having to squeeze more performance out of already
 extensively optimised processors, by focusing on an embarassingly parallel
 task they could get more performance by just adding more of the existing
 processors, creating so-called 
\emph on
multiprocessors
\emph default
.
 Modern GPUs contain a number of multiprocessors, each with several 
\emph on
cores
\emph default
 (processing units), typically 8 per multiprocessor.
 In comparison, mainstream CPUs have only recently become multi-core, and
 quad-core machines are still considered high-end computers despite having
 half the processing cores of a single graphics multiprocessor, of which
 there are several in a cheap GPU.
\end_layout

\begin_layout Standard
The processing capabilities of GPUs have been considered for scientific
 computing for several years 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cite something
\end_layout

\end_inset

 but until recently calculations would have to be translated into an analogous
 graphical task, sent to the GPU for processing, the results transferred
 back then translated into the original context.
 The overhead of conversion and transfering back and forth between the graphics
 card and the motherboard made this approach too inefficient for practical
 use, and the numerical precision of GPUs was insufficient to make large
 calculations worthwhile
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cite that paper which sent calculations back and forth
\end_layout

\end_inset

.
 Recently these limitations have been overcome by the emergence of General-Purpo
se Graphics Processing Units (
\emph on
GPGPUs
\emph default
), capable of running arbitrary code rather than just graphics tasks.
 Complementary programming interfaces, like Nvidia's CUDA and the less vendor-sp
ecific OpenCL, have become available for accessing the cards from mainstream
 programming languages like C, and with this integration the device specificatio
ns have been brought up to meet the precision standards required by these
 language's compilers.
 This has spurred a stream of researchers to offload their intensive computation
s to graphics cards as a more cost-effective alternative to clusters and
 conventional supercomputers.
\end_layout

\begin_layout Section
The CUDA Model
\end_layout

\begin_layout Standard
This project focuses specifically on the use of Nvidia's CUDA (Compute Unified
 Device Architecture
\begin_inset Note Note
status open

\begin_layout Plain Layout
is that right?
\end_layout

\end_inset

) interface, so a more specific description of its operation, and its use
 from C, is given here.
\end_layout

\begin_layout Standard
In CUDA, the graphics card is not directly accessible in the way that RAM
 and registers are accessible.
 Instead, CUDA provides regular C functions to handle the device, for example
 a call to 
\family typewriter
cudaMemcpy(void* destination, void* source, int size, cudaMemcpyHostToDevice)
\family default
 an be declared to
\end_layout

\end_body
\end_document
